# -*- coding: utf-8 -*-
"""loan_approval.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15O8SIX4hfNrtG3KJlI8ALty4AXyi_iG0
"""

# unzip data and delete zip
#!unzip /content/HomeBuyerDat.zip > /dev/null
#!rm /content/HomeBuyerDat.zip > /dev/null

import pandas
# home_buyer_df = pandas.read_csv("HomeBuyerDat.csv")
# home_buyer_df.head(5)

def calc_LTV(user_data, df):
  """
  Given a user ID, calculate their LTV.
  Input:
    user_data - pandas dataframe
    df - pandas dataframe
  Output:
    ltv - calculated ltv in decimal form
    pmi - pmi in decimal form if necessary, else 0.0
  """

  # need to redefine df.loc[id-1] as a 'user' built from input of the questionnaire
  house_value = int(user_data['AppraisedValue'][0])

  # debugging print statement
  print("house_value:")
  print(house_value)
  down_payment = int(user_data['DownPayment'][0])
  print("DownPayment:")
  print(down_payment)

  ltv_decimal = ((house_value - down_payment) / house_value)
  pmi_decimal = .01 if ltv_decimal >= .8 else 0.0

  return ltv_decimal, pmi_decimal

#example
# ltv_dec, pmi_dec = calc_LTV(3, home_buyer_df)
# ltv_dec, pmi_dec

def calc_DTI(user_data, pmi, df):
  """
  Given a user input data and PMI, calculate their DTI.
  Input:
    id - int
    pmi - float (decimal form)
    df - pandas dataframe
  Output:
    dti
  """
  mortgage = int(user_data['MonthlyMortgagePayment'][0])
  mortgage += (pmi * int(user_data['AppraisedValue'])) / 12
  expenses = int(user_data['CreditCardPayment'][0]) + int(user_data['CarPayment'][0]) + int(user_data['StudentLoanPayments'][0]) + mortgage

  return expenses / int(user_data['GrossMonthlyIncome'][0])

# example
# dti_dec = calc_DTI(3, pmi_dec, home_buyer_df)
# dti_dec

def approve_func(user_data, df):
  """
  Given a user ID and corresponding LTV and DTI, approve or deny their loan.
  Input:
    user_data - pandas df
    df - pandas df
  Output:
    score - int where 0 is a rejection and 1 is an approval
    reasons - list of strings with reason labels
  """
  reasons = []
  ltv, pmi = calc_LTV(user_data, df)
  dti = calc_DTI(user_data, pmi, df)

  if int(user_data['CreditScore'][0]) < 640:
    reasons.append("creditscore")
    return 0, reasons

  score = .5

  #if ltv in range 80-100, 20 possible values to scale up from .5 to 1
  if ltv >= .80:
   score -= (((ltv - .80)*100/20) ** 2)/100
   reasons.append("LTV")
  else:
    score += .25

  #if dti is over 43
  if dti > .43:
    score -= (((dti - .43)*100/57) ** 2)/100
    reasons.append("DTI")
  else:
      score += .25

  print("LTV: " + str(ltv * 100) + "%")
  print("DTI: " + str(dti * 100) + "%")
  return 0 if score < .5 else 1, reasons

#example
# approve_func(12, home_buyer_df)

